[
  {
    "objectID": "content.html",
    "href": "content.html",
    "title": "Contributions",
    "section": "",
    "text": "Contributions\nbug-fix rust deserialization\nsys-parser - support for pid"
  },
  {
    "objectID": "projects/schedext_based_scheduling.html",
    "href": "projects/schedext_based_scheduling.html",
    "title": "Targeted CPU Scheduling for a serverless platform",
    "section": "",
    "text": "SchedExt Framework\nAs of Sep 2024, SchedExt is a new framework which will become part of Linux 6.12 kernel. It introduces a new scheduling class at the same priority level as EEVDF which allows BPF programs to modify the scheduling decisions. It’s possible to write a BPF program which can register following callbacks (only few basic ones are mentioned).\n  * init/exit_task      - a new task is created or an existing task is destroyed\n  * select_cpu          - select a CPU for a task\n  * dispatch            - a task needs to be dispatched to local DSQs of the SchedExt core\n  * init/exit_scheduler - a new scheduler is created or an existing scheduler is destroyed\nBy virtue of these callbacks, any arbitrary scheduling policy can be implemented.\nImportant gotos:\n\nSchedExt Kernel Documentation\nSample SchedExt Schedulers\nSchedExt Kernel Releases\n\n\n\nServerless Control Plane\nProof of concept is developed on a research centric serverless control plane that is implemented in Rust. See project Ilúvatar for details about the control plane.\n\n\nMetadata Driven Policy\nThe idea is to take advantage of tight coupling between Control Plane and the scheduling policy. In essence the policy is driven by the metadata of the functions thereby taking advantage of the extra information available at the higher layers.\nProof of Concept: A task size interval assignment policy that is driven by execution time of the functions while enforcing locality works better for  short single threaded functions as opposed to long multi threaded functions. This POC divides the available cores into buckets and assigns function to each bucket based on the historical end to end time of the function. Metadata is shared between the control plane and the schedext scheduler using a pinned eBPF map.",
    "crumbs": [
      "Projects",
      "Targeted CPU Scheduling for a serverless platform"
    ]
  },
  {
    "objectID": "projects/iluvatar.html",
    "href": "projects/iluvatar.html",
    "title": "Iluvatar a Fast Serverless Control Plane written in Rust",
    "section": "",
    "text": "About the project\nIt’s a serverless platform developed with the intent to ease research and provide deterministic results. Whole platform is written in Rust (Safe and Reliable language for Systems development) using tonic (a gRPC framework implementation in Rust).\nIt is a worker centric design which allows overcommitment of resources, multiple queue implementations, support for different execution end points (CPU, GPU) and allows simulating workload instead of actual execution. Deployment across the servers is supported via ansible. It can even run on edge devices like Jetson, hell yeah!.\nModular design of Ilúvatar allows fast paced development and experimentation. For instance, adding a new Queueing scheme is a matter of adding a rust module in queueing directory.\nPlease see our paper(2023) for more details.\n\n\nMy contributions\nFrom 2022 to 2023, my contributions to this project has been to add support for capturing characteristics of functions and develop different queueing schemes.\nFunction Characteristics: Hashmap of function characteristics like end to end time, inter arrival time (IAT) and code execution time on the worker.\nQueueing Schemes: Priority based queueing schemes using execution time and IAT.\n\ncode execution time based priority queue - implementation\nearliest virtual deadline first based priority queue using code execution time to decide the deadline - implementation\n\nmost frequent function first based priority queue using IAT - implementation\n\nI added support for running the control plane on Jetson Orin. It involved rebuilding the functions for ARM platform, capture utilization logs from the jtop utility and setting up 1 TB NVMe on the device to enable hosting large number of containers.\n\nReferences\n\n\nFuerst, Alexander, Abdul Rehman, and Prateek Sharma. 2023. “Ilúvatar: A Fast Control Plane for Serverless Computing.” In Proceedings of the 32nd International Symposium on High-Performance Parallel and Distributed Computing, 267–80. HPDC ’23. New York, NY, USA: Association for Computing Machinery. https://doi.org/10.1145/3588195.3592995.",
    "crumbs": [
      "Projects",
      "Iluvatar a Fast Serverless Control Plane written in Rust"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Abdul Rehman",
    "section": "",
    "text": "Abdul Rehman\nPh.D. student with 8+ years of systems research (2 years) and systems software development (6 years) experience. My recent focus has been on serverless computing, linux scheduling and Machine Learning. I have added Rust, eBPF and deep learning approach using pyTorch to my toolbox on top of C/C++, firmware, virtualization and Linux kernel experience. I am working under the guidance of Prateek Sharma at Indiana University Bloomington. I enjoy diving deep into complex problems, trying to find the last ounce of performance boost in myriad of interconnected components.\nLines of code written.\n\nRust: &gt;2k\n\nPython3: &gt;10k\n\nC/C++: &gt;10k\n\nLinks.\n\nCV\nGithub Profile\nLinkedIn \n\nSeeking a Summer 2025 Internship in the area of Systems (eBPF, Rust, Linux Kernel, Cloud, Performance).\n\n\nResearch Focus\nCurrently, I am trying to improve the performance of a serverless platform using eBPF based sched_ext framework to implement custom scheduling policy that would take advantage of the historical characteristics of the serverless functions, tight coupling with the control plane and machine learning.\n\n\nPublications\n\n\n[1] Fuerst, A., Rehman, A., et al. 2023. Ilúvatar: A fast control plane for serverless computing. Proceedings of the 32nd international symposium on high-performance parallel and distributed computing (New York, NY, USA, 2023), 267–280.\n\n\n\n\nProjects\n\n\n\n\n\n\n\n\n\n\nTargeted CPU Scheduling for a serverless platform\n\n\n\n\n\nMy recent work on implementing custom cpu scheduling (using SchedExt framework) to improve the performance of a serverless platform (written in Rust). \n\n\n\n\n\nSep 27, 2024\n\n\nAbdul Rehman\n\n\n\n\n\n\n\n\n\n\n\n\nEdge-IoT Analytics-Box (Extensible Data Analytics System)\n\n\n\n\n\nA data analytics system that captures and analyzes data in real time. The system is designed to be deployed on edge devices like Jetson Orin. \n\n\n\n\n\nJan 24, 2024\n\n\nAbdul Rehman\n\n\n\n\n\n\n\n\n\n\n\n\nIluvatar a Fast Serverless Control Plane written in Rust\n\n\n\n\n\nDuring my first year of Ph.D I worked on a radical approach to serverless computing. A monolithic, worker centric platform for serverless computing. \n\n\n\n\n\nJun 1, 2023\n\n\nAbdul Rehman\n\n\n\n\n\n\nNo matching items\n\n\n\n\nBlog Posts\n\n\n\n\n\n\n\n\n\n\nExperience as an embedded systems developer\n\n\n\n\n\nA summary of experiences as an embedded systems developer. \n\n\n\n\n\nOct 2, 2024\n\n\nAbdul Rehman\n\n\n\n\n\n\n\n\n\n\n\n\nLuddy Summer School 2024\n\n\n\n\n\nA tutorial introducing Linux and Bash Scripting to High School students. \n\n\n\n\n\nJun 13, 2024\n\n\nAbdul Rehman\n\n\n\n\n\n\n\n\n\n\n\n\nDesign Philosophy for Systems\n\n\n\n\n\nMy philosophy on designing systems. \n\n\n\n\n\nDec 13, 2022\n\n\nAbdul Rehman\n\n\n\n\n\n\nNo matching items\n\n\n\n\nTools\nMy day to day tools\n\ntmux\nvim\nssh\nbash\neBPF\npython\nrust\n\n\n\nAbout Me\nI love to spend time with my family, driving and hiking. I run three miles three times a week. I like to sit staring at a tree for long hours, thinking about how each molecule of air works together to move energy from one place to another, moving the leaves in a way that can be mathematically determined yet seems so undeterministic. How we are no different from a fish living in a sea, witnessing the same effect of energy on a seaweed, yet different enough to reason about it and develop such a deep understanding of it, so much so that we can use it for a completely different purpose.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "posts/jobexp.html",
    "href": "posts/jobexp.html",
    "title": "Experience as an embedded systems developer",
    "section": "",
    "text": "Most of my experience as an embedded systems developer has been focused on virtualization and type 1 hypervisors. I have had the chance to work on cutting edge hardware (at the time) Intel Embedded Processor Elkhartlake (2021) and reslove many interesting issues related to ACPI, AHCI-virt, NVMe-virt etc. On the hypervisor side I really enjoyed adding support for various virtualization solutions.\nVT-d DMAR/IOMU driver: Added support for IOMMU driver to allow device isolation and memory remapping of the VM.\nUEFI virtualization: Developed infrastructure to provide virtual UEFI interface for guest VMs. Designed and developed caching solution for non-volatile variables to avoid SMI generation.\nIntel Graphics Device Driver(Linux-i915): Ported Linux device driver (i915) for Intel Graphics Device to a UEFI driver. It allowed early graphics for Linux and Windows guests - stuff like splash screen and recovery mode menus.\nNVMe virtualization: Contributed to the design and development of the infrastructure. I was responsible for interrupt handling and I/O queue segregation components. Interrupt handling component was implemented using MMIO trap and emulation of PCI MSI-X capability. To verify the paravirtualized implementation, I modified the Linux driver for NVMe into a paravirtualized client.\nQT Framework: Ported QT framework 5.4 to Nucleus RTOS.",
    "crumbs": [
      "Blog Posts",
      "Experience as an embedded systems developer"
    ]
  },
  {
    "objectID": "posts/design_philosophy.html",
    "href": "posts/design_philosophy.html",
    "title": "Design Philosophy for Systems",
    "section": "",
    "text": "This article describes my philosophy on designing systems which is centered around drawing similarity with a human body. It also summarizes principles from Robert C Martin (2000) article and stuff that I have collected over the years.",
    "crumbs": [
      "Blog Posts",
      "Design Philosophy for Systems"
    ]
  },
  {
    "objectID": "posts/design_philosophy.html#summary",
    "href": "posts/design_philosophy.html#summary",
    "title": "Design Philosophy for Systems",
    "section": "",
    "text": "This article describes my philosophy on designing systems which is centered around drawing similarity with a human body. It also summarizes principles from Robert C Martin (2000) article and stuff that I have collected over the years.",
    "crumbs": [
      "Blog Posts",
      "Design Philosophy for Systems"
    ]
  },
  {
    "objectID": "posts/design_philosophy.html#strange-similarity-between-a-program-a-system-a-cell-and-a-human-body.",
    "href": "posts/design_philosophy.html#strange-similarity-between-a-program-a-system-a-cell-and-a-human-body.",
    "title": "Design Philosophy for Systems",
    "section": "Strange similarity between a program, a system, a cell and a human body.",
    "text": "Strange similarity between a program, a system, a cell and a human body.\nA system is a collection of components that work together to achieve a specific objective. Human body is a system built up of extraordinary complex systems working together. It must be following some principles that are universal which can be used to build efficient and reliable systems.\nLet’s draw some similarities between a human body and a program.\nBody\n\nskeleton\nmuscles\ncoordinated actions\n\nCell\n\nDNA\nprotein synthesis\ncoordinated structures\n\nTuring machine\n\nmemory - DNA\ntape - protein synthesis\ncoordinated actions - coordinated structures\n\nProgram\n\ninterfaces / abstractions - skeleton\nspecialized functions / logic units - muscles\n\nSystem\n\nabstractions - skeleton\nspecialized units - muscles\ncoordinated output - coordinated actions\n\nSkeleton of a human body supports the whole structure while muslcles move the body. Interfaces and abstractions are like the skeleton of a program. Logic units are like the muscles of a program. Based on this analogy, it is prudent to first design abstractions and interfaces carefully and then build the logic units. Naturally it points to the functional programming approach which is proving practically useful with Rust (Reliable and Performant Programing Language for Systems). If the abstractions are carefully designed, it should be possible to spin up a new interconnection of muscles (logic units) for each new requirement to achieve the desired output. Let’s call the interconnection of logic units configuration.\nTo summarize a possible way to approach building a new system\n\ndesign skeleton of abstractions that can be moved in a flexible way\ncreate smallest possible logic units that can be interconnected\ncreate dependency firewalls (implicit skeleton)\nmanage placement / dependencies",
    "crumbs": [
      "Blog Posts",
      "Design Philosophy for Systems"
    ]
  },
  {
    "objectID": "posts/design_philosophy.html#traditional-principles-from-robert-c-martins-article",
    "href": "posts/design_philosophy.html#traditional-principles-from-robert-c-martins-article",
    "title": "Design Philosophy for Systems",
    "section": "Traditional Principles from Robert C Martin’s Article",
    "text": "Traditional Principles from Robert C Martin’s Article\nDependency Inversion: Depend on abstractions rather then concrete stuff.\nInterface Segregation: Create interface at I/O - preferably common for common clients.\nLiskov Substitution: Derived class object must keep implicit contracts (pre/post - conditions) of base class.\nOpen/Close Principle: Code should be open to extension (able to change dependencies) but closed to modification (no change to logic units / skeleton).\nWays to make it Open\n\ninheritance\nconfigurations\nI/O\n\nrecursion\n\nClosed\n\nabstractions\nI/O interfaces\nstart/stop states\n\nIt is about categorizing what can change, what cannot change and how to minimize the need for change.",
    "crumbs": [
      "Blog Posts",
      "Design Philosophy for Systems"
    ]
  },
  {
    "objectID": "posts/design_philosophy.html#building-a-system",
    "href": "posts/design_philosophy.html#building-a-system",
    "title": "Design Philosophy for Systems",
    "section": "Building a System",
    "text": "Building a System\n\nUnderstand the requirements.\nUnderstand why the requirements are there.\nList down fundamental components that might be involved.\n\nBuild discrete examples of each component to get a feel of it.\n\nDesign abstractions and interfaces.\nDesign the skeleton of the system.\nCorrelate the sketch with requirements.\nFill in the implementation details.\nImplement.",
    "crumbs": [
      "Blog Posts",
      "Design Philosophy for Systems"
    ]
  },
  {
    "objectID": "posts/design_philosophy.html#implementation-principles",
    "href": "posts/design_philosophy.html#implementation-principles",
    "title": "Design Philosophy for Systems",
    "section": "Implementation Principles",
    "text": "Implementation Principles\nFundamental Components (essentially boils down to functional programming approach)\n\nconfiguration\nlogic - stateless functions\nI/O\n\nGuidelines\n\ndeveloping logic\n\ndivide to the most basic\ngroup by most common\n\nencode context in directory structure\nprogram design should be inherent in file structure/code\n\nuse absolute paths - to enable scripts to run from anywhere\n\n\nthere should be no duplication of logic\nrun the program in a debugger from the very start\n\nadd alot of asserts instead of debug prints\n\n\ndeveloping parallel programs\n\nmake sure it works in serial first\n\nI/O\n\nlog everything\n\nuse disk for I/O\nInteroperation: Expect the output of every program to become the input to another, as yet unknown, program (UNIX philosophy).\n\n\nkeep everything in version control\nseparate development phase from refinement\n\ncreate a proof of concept as fast as possible it can always be refined latter\nFast POC: Design and build software to be tried early, within weeks. Don’t hesitate to throw away the clumsy parts and rebuild them.\n\nusing a new tool / software / library\n\nread philosophy guide / overview of the software\ncreate an example before use\n\nuse jupyter notebook - for data analysis (quick data / visual feedback with state saving)\n\nthen use in project or script for regular use\n\nSingle Responsibility: Make each program do one thing well. Build afresh rather than complicating old programs by adding new “features”.\nUse tools instead of labor:\n\nprefer tools instead of unskilled help to lighten a programming task,\neven if you have to detour to build the tools and expect to throw some of them out after you’ve finished using them.\n\nIdempotence: make scripts in a way - they can run again and again without any side effects - producing same result\nscripting\n\nalways try to use absolute paths (helps in running scripts from anywhere)\neverything should be written in a script - just use run.sh to execute",
    "crumbs": [
      "Blog Posts",
      "Design Philosophy for Systems"
    ]
  },
  {
    "objectID": "posts/design_philosophy.html#solving-problems-as-they-occur",
    "href": "posts/design_philosophy.html#solving-problems-as-they-occur",
    "title": "Design Philosophy for Systems",
    "section": "Solving problems as they occur",
    "text": "Solving problems as they occur\n\ntry to understand the root cause (essence) by asking Why? at least three times\ntry adding another level of indirection to solve the problem\nif stuck for 2 hours, try an alternative simpler approach or discuss with someone",
    "crumbs": [
      "Blog Posts",
      "Design Philosophy for Systems"
    ]
  },
  {
    "objectID": "posts/luddy_summer_school.html",
    "href": "posts/luddy_summer_school.html",
    "title": "Luddy Summer School 2024",
    "section": "",
    "text": "Overview\nGithub Repository\nI have created a tutorial that introduces high school students to Ubuntu 20.04, starting with the fundamentals of Linux using a graphical user interface (GUI) and progressing to the terminal environment. We then delve into bash scripting. The tutorial is designed to be interactive and hands-on, culminating in an exercise where students sort songs by author name.\n\n\nMemories\n |  |\n |\n |",
    "crumbs": [
      "Blog Posts",
      "Luddy Summer School 2024"
    ]
  },
  {
    "objectID": "tools/using_vim.html",
    "href": "tools/using_vim.html",
    "title": "Using VIM",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "projects/wip/dnn_top.html",
    "href": "projects/wip/dnn_top.html",
    "title": "DNNTop: Deep Neural Network based Power Model of the system and top utility",
    "section": "",
    "text": "publication\nidentify the contributions to the project\n\nqueueing infrastructure\ncharacteristics map"
  },
  {
    "objectID": "projects/artifacts/links.html",
    "href": "projects/artifacts/links.html",
    "title": "Links",
    "section": "",
    "text": "Links\nEditable Link for the Architecture Diagram"
  },
  {
    "objectID": "projects/dataanalytics.html",
    "href": "projects/dataanalytics.html",
    "title": "Edge-IoT Analytics-Box (Extensible Data Analytics System)",
    "section": "",
    "text": "Overview\nArchitecture\nPresentation\nPerformance Results\nRepository Layout\nGetting Started\n\n\n\n\nGithub Repository\nEdge-IoT-Analytics-Box is a data analytics system that captures and analyzes data in real time. The system is designed to be deployed on edge devices like Jetson Orin.\n\n\n\n\n\n\n\n\n\n\n\nFor 54 sensors being predicted using arima model and RNN model\n\nNetwork bandwidth consumption on Jetson ~800 Kbytes per sec\nCPU utilization on Jetson ~25 %\nGPU utilization ~40 %\nInfluxDB storage increases by ~7 Kbytes per second\n\nit would take 866 days to fill up 500 Gb of space which is ~2.3 years\n\n\nPlease see report for more details.\n\n\n\nEach module has it’s own directory.\n./tserve (Torch Serve): Contains code to deploy torch serve on Jetson Orin along with scripts for building and delploying models.\n./analytics (Framework): Framework to setup a data analytics pipeline using models deployed on torch serve.\n./streaming_service (Data Fetching): Contains code to setup data streaming from sensors to InfluxDB, including scripts to setup InfluxDB.\n\n\n\n\nsetup InfluxDB on a server using the instructions in streaming_service/README.md\nonce data is streaming to the DB\n\nsetup torch serve on a Jetson Orin using the instructions in tserve/README.md\nsetup an analytics pipeline using the instructions in analytics/README.md",
    "crumbs": [
      "Projects",
      "Edge-IoT Analytics-Box (Extensible Data Analytics System)"
    ]
  },
  {
    "objectID": "projects/dataanalytics.html#overview",
    "href": "projects/dataanalytics.html#overview",
    "title": "Edge-IoT Analytics-Box (Extensible Data Analytics System)",
    "section": "",
    "text": "Github Repository\nEdge-IoT-Analytics-Box is a data analytics system that captures and analyzes data in real time. The system is designed to be deployed on edge devices like Jetson Orin.",
    "crumbs": [
      "Projects",
      "Edge-IoT Analytics-Box (Extensible Data Analytics System)"
    ]
  },
  {
    "objectID": "projects/dataanalytics.html#performance-results",
    "href": "projects/dataanalytics.html#performance-results",
    "title": "Edge-IoT Analytics-Box (Extensible Data Analytics System)",
    "section": "",
    "text": "For 54 sensors being predicted using arima model and RNN model\n\nNetwork bandwidth consumption on Jetson ~800 Kbytes per sec\nCPU utilization on Jetson ~25 %\nGPU utilization ~40 %\nInfluxDB storage increases by ~7 Kbytes per second\n\nit would take 866 days to fill up 500 Gb of space which is ~2.3 years\n\n\nPlease see report for more details.",
    "crumbs": [
      "Projects",
      "Edge-IoT Analytics-Box (Extensible Data Analytics System)"
    ]
  },
  {
    "objectID": "projects/dataanalytics.html#repository-layout",
    "href": "projects/dataanalytics.html#repository-layout",
    "title": "Edge-IoT Analytics-Box (Extensible Data Analytics System)",
    "section": "",
    "text": "Each module has it’s own directory.\n./tserve (Torch Serve): Contains code to deploy torch serve on Jetson Orin along with scripts for building and delploying models.\n./analytics (Framework): Framework to setup a data analytics pipeline using models deployed on torch serve.\n./streaming_service (Data Fetching): Contains code to setup data streaming from sensors to InfluxDB, including scripts to setup InfluxDB.",
    "crumbs": [
      "Projects",
      "Edge-IoT Analytics-Box (Extensible Data Analytics System)"
    ]
  },
  {
    "objectID": "projects/dataanalytics.html#getting-started",
    "href": "projects/dataanalytics.html#getting-started",
    "title": "Edge-IoT Analytics-Box (Extensible Data Analytics System)",
    "section": "",
    "text": "setup InfluxDB on a server using the instructions in streaming_service/README.md\nonce data is streaming to the DB\n\nsetup torch serve on a Jetson Orin using the instructions in tserve/README.md\nsetup an analytics pipeline using the instructions in analytics/README.md",
    "crumbs": [
      "Projects",
      "Edge-IoT Analytics-Box (Extensible Data Analytics System)"
    ]
  }
]