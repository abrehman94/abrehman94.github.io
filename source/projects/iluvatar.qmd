---
title: "Iluvatar a Fast Serverless Control Plane written in Rust"
date: 2023-06-01
bibliography: ../references.bib
author:
  - name: Abdul Rehman 
    orcid: 0009-0005-1568-8068 
    email: abrehman@iu.edu 
    affiliation:
      - name: Indiana University Bloomington 
        city: Bloomington 
        state: IN 
        url: luddy.indiana.edu 
description: >
  During my first year of Ph.D I worked on a radical approach to serverless computing. 
  A monolithic, worker centric platform for serverless computing. 
---

# About the project {#page-ilu}
  
It's a serverless platform developed with the intent to ease research and provide 
deterministic results. 
Whole platform is written in Rust (Safe and Reliable language for Systems development) using 
tonic (a gRPC framework implementation in Rust).

It is a worker centric design which allows overcommitment of resources, multiple queue implementations,
support for different execution end points (CPU, GPU) and allows simulating workload instead of actual execution. 
Deployment across the servers is supported via ansible. 
It can even run on edge devices like Jetson, hell yeah!. 

Modular design of Il√∫vatar allows fast paced development and experimentation. For instance, 
adding a new Queueing scheme is a matter of adding a rust module in 
[queueing directory](https://github.com/abrehman94/iluvatar-faas/tree/master/src/Il%C3%BAvatar/iluvatar_worker_library/src/services/invocation/queueing).

Please see our paper[-@hpdc23] for more details. 

# My contributions 

From 2022 to 2023, my contributions to this project has been to add support for capturing characteristics of 
functions and develop different queueing schemes.  

**[Function Characteristics:](https://github.com/abrehman94/iluvatar-faas/blob/finescheduling/src/Il%C3%BAvatar/iluvatar_worker_library/src/utils/characteristics_map.rs)** 
Hashmap of function characteristics like end to end time, inter arrival time (IAT) and code execution time on the worker. 

**[Queueing Schemes:](https://github.com/abrehman94/iluvatar-faas/tree/finescheduling/src/Il%C3%BAvatar/iluvatar_worker_library/src/services/invocation/queueing)**
Priority based queueing schemes using execution time and IAT.  
 
  * code execution time based priority queue - [implementation](https://github.com/abrehman94/iluvatar-faas/blob/finescheduling/src/Il%C3%BAvatar/iluvatar_worker_library/src/services/invocation/queueing/minheap.rs)
  * earliest virtual deadline first based priority queue using code execution time to decide the deadline - [implementation](https://github.com/abrehman94/iluvatar-faas/blob/finescheduling/src/Il%C3%BAvatar/iluvatar_worker_library/src/services/invocation/queueing/minheap_ed.rs)  
  * most frequent function first based priority queue using IAT - [implementation](https://github.com/abrehman94/iluvatar-faas/blob/finescheduling/src/Il%C3%BAvatar/iluvatar_worker_library/src/services/invocation/queueing/minheap_iat.rs) 

Added support to run the control plane on Jetson Orin. It involved rebuilding the functions the arm platform, adding support 
to capture utilization logs from the jtop utility and setting up 1 TB NVMe to enable hosting large number of containers. 

### References

::: {#refs}
:::







