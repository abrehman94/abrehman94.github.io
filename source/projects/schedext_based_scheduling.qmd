---
title: "Targeted Scheduling for a serverless platform"
date: 2024-09-27
author:
  - name: Abdul Rehman 
    orcid: 0009-0005-1568-8068 
    email: abrehman@iu.edu 
    affiliation:
      - name: Indiana University Bloomington 
        city: Bloomington 
        state: IN 
        url: luddy.indiana.edu 
description: >
  My recent work on implementing custom cpu scheduling (using SchedExt framework) to improve the performance 
  of a serverless platform (written in Rust).
---

# SchedExt Framework  

As of Sep 2024, SchedExt is a new framework which will become part of [Linux 6.12 kernel](https://lwn.net/SubscriberLink/991205/deed0c808397b420/). It introduces a new scheduling class at the same priority level as EEVDF which allows BPF programs to modify the scheduling decisions. 
It's possible to write a BPF program which can register following callbacks (only few basic ones are mentioned).

```
  * init/exit_task      - a new task is created or an existing task is destroyed
  * select_cpu          - select a CPU for a task
  * dispatch            - a task needs to be dispatched to local DSQs of the SchedExt core
  * init/exit_scheduler - a new scheduler is created or an existing scheduler is destroyed
```

By virtue of these callbacks, any arbitrary scheduling policy can be implemented. 

Important gotos: 

  * [SchedExt Kernel Documentation](https://github.com/sched-ext/scx-kernel-releases/blob/sched_ext/for-6.12/Documentation/scheduler/sched-ext.rst)
  * [Sample SchedExt Schedulers](https://github.com/sched-ext/scx)
  * [SchedExt Kernel Releases](https://github.com/sched-ext/scx-kernel-releases)

# Serverless Control Plane 

Proof of concept is developed on a research centric serverless control plane that is implemented in Rust. 
See [project Il√∫vatar](iluvatar.qmd) for details about the control plane. 

# Metadata Driven Policy      

The idea is to take advantage of tight coupling of Control Plane and the scheduling policy by using 
metadata of the functions to hint the CPU scheduler to make better scheduling decisions.

[Proof of Concept:](https://github.com/abrehman94/iluvatar-faas/blob/finescheduling/src/Il%C3%BAvatar/fs_policy_tsksz/src/bpf/main.bpf.c)
A task size interval assignment policy that is driven by 
execution time of the functions while enforcing locality works better for\ 
short single threaded functions as opposed to long multi threaded functions. 
This POC divides the available cores into buckets and assigns function to [each bucket](https://github.com/abrehman94/iluvatar-faas/blob/finescheduling/src/Il%C3%BAvatar/fs_policy_tsksz/src/bpf/main.bpf.c#L135) based on the historical end to end time of the function. 
Metadata is shared between the control plane and the schedext scheduler using a [pinned eBPF map](https://github.com/abrehman94/iluvatar-faas/tree/finescheduling/src/Il%C3%BAvatar/iluvatar_bpf_library). 




